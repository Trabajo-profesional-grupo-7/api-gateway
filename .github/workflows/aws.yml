on:
  push:
    branches:
      - main
      - develop

name: Deploy to ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-east-2
      AWS_ECR_REPOSITORY_NAME: gateway
      AWS_ECS_SERVICE_NAME: GATEWAY-SERVICE
      AWS_ECS_CLUSTER_NAME: T3-LARGE-CLUSTER

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            --build-arg EXTERNAL_SERVICES_URL="${{ secrets.EXTERNAL_SERVICES_URL }}" \
            --build-arg PORT="${{ secrets.PORT }}" \
            --build-arg ATTRACTIONS_URL="${{ secrets.ATTRACTIONS_URL }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg NOTIFICATIONS_URL="${{ secrets.NOTIFICATIONS_URL }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg PLANNER_URL="${{ secrets.PLANNER_URL }}" \
            --build-arg AUTHENTICATION_URL="${{ secrets.AUTHENTICATION_URL }}" \
            --build-arg QUEUE_URL="${{ secrets.QUEUE_URL }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: ecs update-service --cluster ${{ env.AWS_ECS_CLUSTER_NAME }} --service ${{ env.AWS_ECS_SERVICE_NAME }} --force-new-deployment
        env:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
